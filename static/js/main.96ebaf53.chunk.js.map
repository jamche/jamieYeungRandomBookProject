{"version":3,"sources":["Footer.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","href","Component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomFiction","responseFiction","randomF","push","Math","floor","random","length","fiction","axios","method","url","dataResponse","then","data","results","books","setState","allBooks","randomNonFiction","responseNonFiction","randomNf","nonFiction","randomManga","responseManga","randomM","manga","randomPicture","responsePictureBook","randomPb","pictureBook","state","className","onClick","map","book","console","log","src","book_image","alt","title","author","description","amazon_product_url","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96ebaf53.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass Footer extends Component {\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <footer>\r\n          <p>Copyright Jamie Yeung 2019 | Data taken from <a href=\"https://developer.nytimes.com/docs/books-product/1/overview\">NY TImes Books API</a></p>\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport Footer from './Footer.js';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(){\r\n      super();\r\n      // create initial state\r\n      this.state = {\r\n        allBooks:[]\r\n      }\r\n    }\r\n    // randomize fiction array\r\n    randomFiction = (responseFiction) => {\r\n      const randomF = []\r\n      randomF.push(responseFiction[Math.floor(Math.random() * responseFiction.length)]);\r\n      return randomF;\r\n    }\r\n    // fiction array call\r\n    fiction = () => {\r\n      const urlFiction = \"https://api.nytimes.com/svc/books/v3/lists/current/Hardcover%20Fiction.json?api-key=AYVlgIMoj1SLFq79F0Kbjn46f2eGnERX\"     \r\n      // api call\r\n      axios({\r\n        method:'GET',\r\n        url:urlFiction,\r\n        dataResponse:'json'\r\n      }).then(responseFiction => {       \r\n        responseFiction = responseFiction.data.results.books\r\n\r\n        this.setState({\r\n          allBooks: this.randomFiction(responseFiction)\r\n        })\r\n      })\r\n    }\r\n    // randomize nonFiction\r\n    randomNonFiction = (responseNonFiction) => {\r\n      const randomNf = []\r\n      randomNf.push(responseNonFiction[Math.floor(Math.random() * responseNonFiction.length)]);\r\n      return randomNf;\r\n    }\r\n    // non fiction array call\r\n    nonFiction = () => {\r\n      const urlNonFiction = \"https://api.nytimes.com/svc/books/v3/lists/current/Hardcover%20Nonfiction.json?api-key=AYVlgIMoj1SLFq79F0Kbjn46f2eGnERX\"\r\n\r\n      axios({\r\n        method:'GET',\r\n        url:urlNonFiction,\r\n        dataResponse:'json'\r\n      }).then(responseNonFiction=>{\r\n        responseNonFiction = responseNonFiction.data.results.books\r\n        this.setState({\r\n          allBooks:this.randomNonFiction(responseNonFiction)\r\n        })\r\n      })\r\n    }\r\n    // randomize manga\r\n  randomManga = (responseManga) => {\r\n    const randomM = []\r\n    randomM.push(responseManga[Math.floor(Math.random() * responseManga.length)]);\r\n    return randomM;\r\n  }\r\n    // manga genre call\r\n    manga = () => {\r\n      const urlManga = \"https://api.nytimes.com/svc/books/v3/lists/current/Manga.json?api-key=AYVlgIMoj1SLFq79F0Kbjn46f2eGnERX\"\r\n      axios({\r\n        method:'GET',\r\n        url:urlManga,\r\n        dataResponse:'json'\r\n      }).then(responseManga => {\r\n        responseManga =  responseManga.data.results.books\r\n        this.setState({\r\n          allBooks:this.randomManga(responseManga)\r\n        })\r\n      })\r\n    }\r\n    // randomize picture\r\n    randomPicture = (responsePictureBook) =>{\r\n      const randomPb = []\r\n      randomPb.push(responsePictureBook[Math.floor(Math.random() * responsePictureBook.length)]);\r\n      return randomPb;\r\n    }\r\n    // picture books\r\n    pictureBook = () =>{\r\n      const urlPictureBook = \"https://api.nytimes.com/svc/books/v3/lists/current/Picture%20Books.json?api-key=AYVlgIMoj1SLFq79F0Kbjn46f2eGnERX\"\r\n      axios({\r\n        method:'GET',\r\n        url:urlPictureBook,\r\n        dataResponse:'json'\r\n      }).then(responsePictureBook => {\r\n        responsePictureBook = responsePictureBook.data.results.books\r\n        this.setState({\r\n          allBooks:this.randomPicture(responsePictureBook)\r\n        })\r\n      })\r\n    }\r\n    render(){\r\n      return (\r\n        <div className=\"App\">\r\n          <div className=\"darkBack\">\r\n            <h1>Book of the Week</h1>\r\n            <p>Don't know what to read? No problem, just click one of the genres below for a book recommendation from the NY Times Best Sellers of the week!</p>\r\n          </div>\r\n          <div className=\"buttons wrapper bounce-in-left\">\r\n            {/* on fiction click, display results */}\r\n            <button \r\n            onClick = {this.fiction}\r\n              className= \"button\"\r\n            >Fiction</button>\r\n            {/* on nonFiction click, display */}\r\n            <button \r\n            onClick = {this.nonFiction}\r\n            className = \"button\"\r\n            >Non Fiction</button>\r\n            {/* on manga click, display */}\r\n            <button \r\n            onClick = {this.manga}\r\n            className = \"button\"\r\n            >Manga</button>\r\n            {/* on picture book click display */}\r\n            <button \r\n            onClick = {this.pictureBook}\r\n            className =\"button\"\r\n            >Picture Book</button>\r\n          </div>\r\n          <div className=\"wrapper\">\r\n\r\n            {this.state.allBooks.map((book) => {\r\n              console.log(book)\r\n\r\n              return (\r\n                <div className=\"result\">\r\n                  <div className=\"imgContain\">\r\n                    <img src={book.book_image} alt={book.title} className='swirl-in-fwd'/>\r\n                  </div>\r\n                  <div className=\"resultContent tracking-in-expand-fwd-top\">\r\n                    <h2>{book.title}</h2>\r\n                    <p><span>Author</span> : {book.author}</p>\r\n                    <p><span>Synopsis</span> : {book.description}</p>\r\n                    <p> Click one of the options above again to get another result if you're not satisfied.</p>\r\n                    <p>Get your book here : <a href={book.amazon_product_url}> Amazon </a></p>\r\n                  </div>\r\n                </div>\r\n              )\r\n            })\r\n            }\r\n          </div>\r\n          <Footer /> \r\n        </div> \r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n// saved response from API call in state when button for genre is clicked\r\n// ******\r\n// when button 'fiction' is clicked, need to also display Results with fiction results\r\n\r\n// same thing for nonFiction","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}